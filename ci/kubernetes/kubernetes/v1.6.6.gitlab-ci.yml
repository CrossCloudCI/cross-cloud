image: docker:17.05.0
stages:
  - build
  - release

before_script:
  - export CI_CONFIG_REPO=$(echo $CI_CONFIG_PATH | sed s:/raw.*$:.git:)
  - export GITLAB_API_ENDPOINT=$(echo $CI_PROJECT_URL | sed s:$CI_PROJECT_PATH:api/v4:)
  - export CROSS_CLOUD_NAMESPACE=$(echo $CI_CONFIG_REPO | sed s~`echo $CI_PROJECT_URL | sed s:$CI_PROJECT_PATH::`~~ | sed s:.git::)
  - export GITLAB_API_PRIVATE_TOKEN=$CI_BUILD_TOKEN
  - export BASE_URL=${BASE_URL:-$(dirname $CI_CONFIG_PATH)}

build:
  stage: build
  variables:
    KUBE_DOCKER_REGISTRY: "${CI_REGISTRY_IMAGE}"
    KUBE_DOCKER_IMAGE_TAG: "${CI_COMMIT_REF_SLUG}.${CI_PIPELINE_ID}.${CI_JOB_ID}"
    KUBE_RELEASE_RUN_TESTS: "n"
    KUBE_FASTBUILD: "false"
    KUBE_VERBOSE: "0"
    FEDERATION: "false"
  script:
    - apk update
    - apk add bash tar rsync git curl make file
    - echo "We are only going to build for amd64 for this demo"
    - sed -i -e '/ linux\/arm/ s/^/#/' hack/lib/golang.sh 
    - sed -i -e '/ linux\/s390/ s/^/#/' hack/lib/golang.sh 
    - sed -i -e '/ linux\/386/ s/^/#/' hack/lib/golang.sh 
    - sed -i -e '/ linux\/ppc64le/ s/^/#/' hack/lib/golang.sh 
    - sed -i -e '/ darwin\/amd64/ s/^/#/' hack/lib/golang.sh 
    - sed -i -e '/ darwin\/386/ s/^/#/' hack/lib/golang.sh 
    - sed -i -e '/ windows\/386/ s/^/#/' hack/lib/golang.sh 
    - sed -i -e '/ windows\/amd64/ s/^/#/' hack/lib/golang.sh 
    - ./build/release.sh || sleep 99999
    - docker images | grep kubernetes/kubernetes
    - docker login -u "gitlab-ci-token" -p "$CI_JOB_TOKEN" $CI_REGISTRY
    - docker push "$CI_REGISTRY_IMAGE/hyperkube-amd64:$KUBE_DOCKER_IMAGE_TAG"
    - docker push "$CI_REGISTRY_IMAGE/kube-apiserver-amd64:$KUBE_DOCKER_IMAGE_TAG"
    - docker push "$CI_REGISTRY_IMAGE/kube-controller-manager-amd64:$KUBE_DOCKER_IMAGE_TAG"
    - docker push "$CI_REGISTRY_IMAGE/kube-scheduler-amd64:$KUBE_DOCKER_IMAGE_TAG"
    - docker push "$CI_REGISTRY_IMAGE/kube-proxy-amd64:$KUBE_DOCKER_IMAGE_TAG"
    - docker push "$CI_REGISTRY_IMAGE/kube-aggregator-amd64:$KUBE_DOCKER_IMAGE_TAG"
    - cp -a _output/dockerized/bin/linux/amd64 linux-amd64
    - echo export TF_VAR_kubelet_image_url="$CI_REGISTRY_IMAGE/hyperkube-amd64" > ci.vars
    - echo export TF_VAR_kubelet_image_tag="$KUBE_DOCKER_IMAGE_TAG" >> ci.vars
    - echo export KUBERNETES_IMAGE="$CI_REGISTRY_IMAGE/hyperkube-amd64" > release.env
    - echo export KUBERNETES_TAG="$KUBE_DOCKER_IMAGE_TAG" >> release.env
    - echo export KUBE_APISERVER_IMAGE="$CI_REGISTRY_IMAGE/kube-apiserver-amd64" >> release.env
    - echo export KUBE_APISERVER_TAG="$KUBE_DOCKER_IMAGE_TAG" >> release.env
    - echo export KUBE_CONTROLLER_MANAGER_IMAGE="$CI_REGISTRY_IMAGE/kube-controller-manager-amd64" >> release.env
    - echo export KUBE_CONTROLLER_MANAGER_TAG="$KUBE_DOCKER_IMAGE_TAG" >> release.env
    - echo export KUBE_SCHEDULER_IMAGE="$CI_REGISTRY_IMAGE/kube-scheduler-amd64" >> release.env
    - echo export KUBE_SCHEDULER_TAG="$KUBE_DOCKER_IMAGE_TAG" >> release.env
    - echo export KUBE_PROXY_IMAGE="$CI_REGISTRY_IMAGE/kube-proxy-amd64" >> release.env
    - echo export KUBE_PROXY_TAG="$KUBE_DOCKER_IMAGE_TAG" >> release.env
    - echo export KUBE_AGGREGATOR_IMAGE="$CI_REGISTRY_IMAGE/kube-aggregator-amd64" >> release.env
    - echo export KUBE_AGGREGATOR_TAG="$KUBE_DOCKER_IMAGE_TAG" >> release.env
    - echo export KUBE_BINARIES_URL=https://gitlab.cncf.ci/kubernetes/kubernetes/-/jobs/${CI_JOB_ID}/artifacts/raw/linux-amd64/ >> release.env
    - cat release.env
  artifacts:
    name: "${CI_JOB_NAME}.${CI_PIPELINE_ID}.${CI_JOB_ID}"
    when: always
    expire_in: 1 weeks
    paths:
      - ci.vars
      - release.env
      - linux-amd64

build-e2e:
  stage: build
  variables:
    KUBE_DOCKER_REGISTRY: "${CI_REGISTRY_IMAGE}"
    KUBE_DOCKER_IMAGE_TAG: "${CI_COMMIT_REF_SLUG}.${CI_PIPELINE_ID}.${CI_JOB_ID}"
  script:
    - apk update
    - apk add git
    - docker login -u "gitlab-ci-token" -p "$CI_JOB_TOKEN" $CI_REGISTRY
    - docker build -t "$CI_REGISTRY_IMAGE/kubernetes-e2e:$KUBE_DOCKER_IMAGE_TAG" $CI_CONFIG_REPO#ci-centralized-config:ci/kubernetes/kubernetes/e2e/
    - docker push "$CI_REGISTRY_IMAGE/kubernetes-e2e:$KUBE_DOCKER_IMAGE_TAG"
    - echo export KUBERNETES_E2E_IMAGE="$CI_REGISTRY_IMAGE/kubernetes-e2e" > e2e.env
    - echo export KUBERNETES_E2E_TAG="$KUBE_DOCKER_IMAGE_TAG" >> e2e.env
  artifacts:
    name: "${CI_JOB_NAME}.${CI_PIPELINE_ID}.${CI_JOB_ID}"
    expire_in: 1 weeks
    paths:
      - e2e.env

release:
  stage: release
  image: ruby:2.3.3
  script:
    - gem install gitlab
    - target_project_id=$(ruby -e "require 'gitlab' ; p=Gitlab.project_search('cross-cloud').find{|x| x.to_hash['path_with_namespace']=='${CROSS_CLOUD_NAMESPACE}'} ; print p.id if p")
    - echo cross-cloud is at $target_project_id
    - cat e2e.env
    - cat release.env
    - curl -X POST
        -F token=$CI_JOB_TOKEN
        -F ref=ci-stable-v0.1.0
        $GITLAB_API_ENDPOINT/projects/${target_project_id}/trigger/pipeline
  artifacts:
    name: "${CI_JOB_NAME}.${CI_PIPELINE_ID}.${CI_JOB_ID}"
    expire_in: 1 weeks
    paths:
      - ci.vars
      - release.env
      - e2e.env
