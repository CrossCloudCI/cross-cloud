stages:
  - Artifacts
  - Cross-Cloud
  - End-To-End
  - Update-Dashboard

before_script:
  - export BASE_URL=${BASE_URL:-$(echo $CI_PROJECT_URL |  cut -d'/' -f1-3)}
  - mkdir -p ./data ; touch ./data/empty.env
  - for envfile in data/*env ; do source $envfile ; echo ----- $envfile ---- ; cat $envfile ; done
  - export KUBECONFIG=$(pwd)/data/${CLOUD}/kubeconfig
  - >
    if [ -z "$CROSS_CLOUD_YML" ]; then
      export CROSS_CLOUD_YML="https://raw.githubusercontent.com/CrossCloudCI/cncf-configuration/production/cross-cloud.yml"
    else
      export CROSS_CLOUD_YML="$CROSS_CLOUD_YML"
    fi
  - >
    if [ "$BASE_URL" == "https://gitlab.cncf.ci" ]; then
      export ENVIRONMENT="pd"
    elif [ "$BASE_URL" == "https://gitlab.staging.cncf.ci" ]; then
      export ENVIRONMENT="sg"
    elif [ "$BASE_URL" == "https://gitlab.dev.cncf.ci" ]; then
      export ENVIRONMENT="dv"
    elif [ "$BASE_URL" == "https://gitlab.cidev.cncf.ci" ]; then
      export ENVIRONMENT="ci"
    else
      echo "Environment unknown: $BASE_URL"
      exit 1
    fi
  - >
    if [ "$CI_JOB_NAME" == "Build-Source" ]; then
      source /opt/local/etc/rvmrc ; source /opt/local/etc/profile.d/rvm.sh ; rvm install "ruby-2.6.3" ; rvm use ruby-2.6.3 ;  cp -a /opt/local/dashboard /dashboard ; pushd /dashboard ; source /opt/local/.env ; ./bin/update_dashboard ; popd
    elif [ "$CI_JOB_NAME" == "Dashboard" ]; then
      source /opt/local/etc/rvmrc ; source /opt/local/etc/profile.d/rvm.sh ; rvm install "ruby-2.6.3" ; rvm use ruby-2.6.3 ;  cp -a /opt/local/dashboard /dashboard ; pushd /dashboard ; source /opt/local/.env ; ./bin/update_dashboard ; popd
    else
      source /opt/local/alpine/etc/rvmrc ; source /opt/local/alpine/etc/profile.d/rvm.sh ; rvm install "ruby-2.6.3" ; rvm use ruby-2.6.3 ; cp -a /opt/local/dashboard /dashboard ; pushd /dashboard ; source /opt/local/.env ; ./bin/update_dashboard ; popd
    fi

.build_source: &build_source
  image: buildpack-deps:stretch
  stage: Artifacts
  variables:
    # SOURCE
    # ORG: MUST BE SET
    # PROJECT: MUST BE SET
    # PROJECT_ID: MUST BE SET
  script:
    - apt update && apt -y install jq
    - >
      if [ -z "${SOURCE}" ]; then
        exit 0 #Should Show Skipped on Gitlab CI FIXME
      elif [ "${DISABLE_SOURCE}" == "yes" ]; then
        exit 0 #Should Show Skipped on Gitlab CI FIXME
      else
        PROJECT_JOB=$(curl --header "PRIVATE-TOKEN:${TOKEN}" "${BASE_URL}/api/v4/projects/14/pipelines/${SOURCE}/jobs?scope=success" | jq '.[] | select(.name=="container") | .id')
        curl -s -o data/kubernetes.env -L "${BASE_URL}/kubernetes/kubernetes/-/jobs/${PROJECT_JOB}/artifacts/raw/release.env"
        cat data/kubernetes.env
      fi

  artifacts:
    name: "${CI_JOB_NAME}_${CI_COMMIT_REF_NAME}"
    untracked: true
    expire_in: 5 weeks
    paths:
      - ./data

# Deploy Template used for Each Cloud
.kubernetes_deploy_template: &kubernetes_deploy_template
  image: ${CI_REGISTRY}/cncf/cross-cloud/provisioning:$CI_COMMIT_REF_SLUG
  stage: Cross-Cloud
  variables:
    CLOUD: MUST BE SET
  script:
    - >
      if [ $CLOUD == "packet" ] && [ $CI_COMMIT_REF_NAME == "production" ] && [ $ARCH != "arm64" ]; then
         echo "Write reserved node config"
         cp /cncf/packet/packet_master_reservation /cncf/packet/modules/master/override.tf
         cp /cncf/packet/packet_worker_reservation /cncf/packet/modules/worker/override.tf
      else
       echo "Skipping reservations"
      fi
    - >
      if [ $ARCH == "arm64" ]; then
         echo "Write arm64 config"
         cp /cncf/packet/packet_arch_override /cncf/packet/override.tf
         export TF_VAR_master_node_count=1
      else
       echo "Skipping arm configuration"
      fi
    - /cncf/provision.sh ${CLOUD}-deploy ${ARCH}${ENVIRONMENT}${DEPLOYMENT_SHA} s3 ${CLOUD}
  artifacts:
    when: always
    expire_in: 4 weeks
    paths:
      - ./data/

# # E2E Template used for Per Cloud e2e Tests
# .k8s_e2e_template: &k8s_e2e_template
#   image: ${CI_REGISTRY}/kubernetes/kubernetes/kubernetes-e2e:ci-v1-6-3.job.4793
#   stage: cncf-e2e
#   variables:
#     CLOUD: MUST BE SET
#   environment:
#     name: MUST BE SET
#     url: MUST BE SET
#   script:
#     - /kubernetes/e2e/run-conformance.sh

# Per Cloud Destroy Template only run when DESTROY_VAR is Set
.kubernetes_cloud_destroy_template: &kubernetes_cloud_destroy_template
  image: ${CI_REGISTRY}/cncf/cross-cloud/provisioning:$CI_COMMIT_REF_SLUG
  stage: Cross-Cloud
  when: manual
  variables:
    CLOUD: MUST BE SET
  script:
    - >
      if [ $CLOUD == "oci" ]; then
         echo "Writing certs"
         mkdir /cncf/keys
         echo "$OCI_API_KEY" > /cncf/keys/oci_api_key.pem
         echo "$OCI_API_PUB" > /cncf/keys/oci_api_key_pub.pem
      else
        echo "Skipping OCI Cloud Certs"
      fi
    - /cncf/provision.sh ${CLOUD}-destroy ${ARCH}${ENVIRONMENT}${DEPLOYMENT_SHA} s3 ${CLOUD}

# Build-Source VARs
Build-Source:
  <<: *build_source

# Cloud Deploy VARs
Provisioning:
  <<: *kubernetes_deploy_template
  variables:
    CLOUD: "${CLOUD}"

# # AWS E2E VARs
# aws_k8s_e2e:
#   <<: *k8s_e2e_template
#   variables:
#     CLOUD: ${AWS_CLOUD}
#   environment:
#     name: ${AWS_CLOUD}-${CI_COMMIT_REF_SLUG}
#     url: https://$CI_ENVIRONMENT_SLUG.demo.cncf.ci/

# AWS Destroy VARs
Kubernetes_destroy:
  <<: *kubernetes_cloud_destroy_template
  variables:
    CLOUD: "${CLOUD}"

Dashboard:
  image: crosscloudci/debian-docker
  stage: Update-Dashboard
  script:
    - echo 'true'
